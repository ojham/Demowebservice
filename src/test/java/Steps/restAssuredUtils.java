
package Steps;

import static org.hamcrest.Matchers.containsInAnyOrder;
import static org.hamcrest.Matchers.equalTo;
import static org.hamcrest.Matchers.equalToIgnoringCase;
import static org.hamcrest.Matchers.hasKey;
import static org.testng.Assert.assertEquals;

import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.io.StringWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.io.output.WriterOutputStream;
import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.testng.asserts.SoftAssert;

import com.mysql.cj.jdbc.result.ResultSetMetaData;

import Base.baseUtil;
import Constants.constants;
import Utils.genericUtils;
import cucumber.api.java.After;
import cucumber.api.java.en.And;
import cucumber.api.java.en.Given;
import cucumber.api.java.en.Then;
import cucumber.api.java.en.When;
import cucumber.runtime.CucumberException;
import gherkin.deps.com.google.gson.Gson;
import io.restassured.RestAssured;
import io.restassured.filter.log.RequestLoggingFilter;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;
import io.restassured.response.ValidatableResponse;
import io.restassured.specification.RequestSpecification;
import pojo.Mainpojo;

@SuppressWarnings("unused")
public class restAssuredUtils extends baseUtil {
	public static Logger log = LogManager.getLogger(restAssuredUtils.class.getName());
	// String ENDPOINT_baseURI;
	static Response response;
	private ValidatableResponse json;
	private RequestSpecification request;
	private baseUtil base;
	// Create Reference
	genericUtils refgenericUtils = new genericUtils();
	SoftAssert softassert = new SoftAssert();
	static HashMap<String, String> reqParameters;

	public restAssuredUtils(baseUtil base) {
		this.base = base;
	}

	// ************************************RequestParameters*************************************************************************

	/**
	 * Setting the End point URI
	 * 
	 * @param ENDPOINT_baseURI
	 * @throws Throwable
	 */
	@Given("^We have an ENDPOINT_baseURI \"([^\"]*)\"$")
	public void we_have_an_ENDPOINT_baseURI(String ENDPOINT_baseURI) {
		log.info("<============================SCENARIO===================================>");
		log.debug("Base Uri Is:----" + base.urlProperties.get(ENDPOINT_baseURI).toString());
		RestAssured.baseURI = base.urlProperties.getProperty(ENDPOINT_baseURI);

	}

	/**
	 * Initializing New Request
	 */
	@And("^We declare a new Request$")
	public void weDeclareANewRequest() throws Throwable {
		System.out.println("Initialize");
		request = RestAssured.given();
	}

	/**
	 * Assign Form Parameter
	 * 
	 * @param requestParams
	 * @throws Throwable
	 */

	@When("^We have below Path parameters$")
	public void weHaveBelowPathParameters(Map<String, String> requestParams) throws Throwable {
		requestParams = setAutoGeneratedParameters(requestParams);
		request.given().pathParams(requestParams);
		base.requestParameters.putAll(requestParams);
		log.debug("Setting the Path Parameter");
	}

	/**
	 * Setting Header Parameters
	 * 
	 * @param requestParams
	 * @throws Throwable
	 */
	@And("^We have below Header parameters$")
	public void weHaveBelowHeaderParameters(Map<String, String> requestParams) throws Throwable {
		requestParams = setAutoGeneratedParameters(requestParams);
		request.given().headers(requestParams);
		log.debug("Setting the Header Parameter");
	}

	/**
	 * Setting Query Parameters
	 * 
	 * @param requestParams
	 * @throws Throwable
	 */

	@And("^We have the below Query parameters$")
	public void we_have_the_below_Query_parameters(Map<String, String> queryparameter) throws Throwable {
		queryparameter = setAutoGeneratedParameters(queryparameter);
		request.given().queryParams(queryparameter);
		log.debug("Setting the Query Parameter");
	}

	/**
	 * Setting Form Parameters
	 * 
	 * @param requestParams
	 * @throws Throwable
	 */

	@And("We have below Form parameters$")
	public void We_have_below_Form_parameters(Map<String, String> requestParams) throws Throwable {
		requestParams = setAutoGeneratedParameters(requestParams);
		request.given().params(requestParams);
		base.requestParameters.putAll(requestParams);
		log.debug("Setting the Form Parameter");

	}

	/**
	 * Passing the Json Body in the request
	 * 
	 * @param requestParams
	 * @throws Throwable
	 */

	@And("^we have below Json Request Body$")
	public void weHaveBelowJsonRequestBody(Map<String, String> requestParams) throws Throwable {
		requestParams = setAutoGeneratedParameters(requestParams);
		JSONObject requestJson = new JSONObject();
		requestJson.putAll(requestParams);
		base.requestParameters.putAll(requestParams);
		request.body(requestJson);
	}

	@Then("^We have the Query \"([^\"]*)\" parameters$")
	public void we_have_the_Query_parameters(String magcode) throws Throwable {
		request.given().queryParam("magcode", magcode);
		log.debug("Setting the Query Parameter");

	}

	// ************************************Sending
	// Request************************************************
	/**
	 * Send a Post Request
	 * 
	 * @param webserviceName
	 * @throws Throwable
	 */
	@When("^We send post request to service \"([^\"]*)\"$")
	public void we_send_post_request_to_service(String webserviceName) throws Throwable {
		response = request.when().post(base.urlProperties.get(webserviceName).toString());
		log.debug("user sends post request to : " + webserviceName);
	}

	/**
	 * Send a Get Request
	 * 
	 * @param webserviceName
	 * @throws Throwable
	 */
	@When("^we send Get request to service \"([^\"]*)\"$")
	public void weSendGetRequestToService(String webserviceName) throws Throwable {
		System.out.println("user sends Get request");
		response = request.when().get(base.urlProperties.get(webserviceName).toString());
		log.debug("user sends Get request to : " + webserviceName);
	}

	/**
	 * Send a Put Request
	 * 
	 * @param webserviceName
	 * @throws Throwable
	 */
	@When("^We send Put request to service \"([^\"]*)\"$")
	public void weSendPutRequestToService(String webserviceName) throws Throwable {
		System.out.println("user sends Put request");
		response = request.when().put(base.urlProperties.get(webserviceName).toString());
		log.debug("user sends Put request to : " + webserviceName);
	}

	/**
	 * Send a Delete Request
	 * 
	 * @param webserviceName
	 * @throws Throwable
	 */
	@When("^We send Delete request to service \"([^\"]*)\"$")
	public void weSendDeleteRequestToService(String webserviceName) throws Throwable {
		System.out.println("user sends Delete request");
		response = request.when().delete(base.urlProperties.get(webserviceName).toString());
		log.debug("user sends Delete request to : " + webserviceName);
	}

	/**
	 * Sending multiple Get Request
	 * 
	 * @param webserviceName
	 * @throws Throwable
	 */

	@When("^We send multiple get Request to service \"([^\"]*)\" and the response code should be (\\d+)\\.$")
	public void we_send_multiple_get_Request_to_service_and_the_response_code_should_be(String webserviceName,
			int statusCode) throws Throwable {
		int i = 0;
		while (i < 2) {
			request.when().get(base.urlProperties.get(webserviceName).toString()).then().assertThat()
					.statusCode(statusCode);
			i++;
		}

	}

	// @Then("^we verify the if customer is created in database by executing the
	// below Query$")
	// public void
	// we_verify_the_if_customer_is_created_in_database_by_executing_the_below_Query(String
	// Query) throws Throwable {
	// establishDBConnectionandfetchResult(Query);
	// }
	//

	// qUERY CREATION

	@Then("^we verify the if customer is created in database by executing the below Query$")
	public void we_verify_the_if_customer_is_created_in_database_by_executing_the_below_Query(
			Map<String, String> requestParams) throws Throwable {

		requestParams = setAutoGeneratedParameters(requestParams);
		Set<String> keys = requestParams.keySet();
		try {

			String query = fetchingQuery("CUSTOMER_TABLE_CUSTOMERDATA");

			for (String key : keys) {
				String toreplace="{" + key + "}";
				 query = query.replace(toreplace, "\""+requestParams.get(key)+"\"");
			}

			
			System.out.println(query);
			ArrayList<Map<String, Object>> resultset = establishDBConnectionandfetchResult(query);
			System.out.println(resultset);
			// if (resultset.size() != 0) {
			// for (Map<String, Object> row : resultset) {
			// //
			// if(row.get("USER_ID").toString().equalsIgnoreCase(requestParams.get("userid"))){
			// // log.info("User has been created in the database.");
			// softassert.assertTrue(row.get("USER_ID").toString().equalsIgnoreCase(requestParams.get(key)));
			// log.info("User has been created in the database.");
			// }
			// else{
			// log.info("User does not exist in database.");
			//
			// }
			// } else {
			// softassert.fail("No rows fetched from the given query");
			// log.debug("No rows fetched from the given query");
			// }
			//
			// softassert.assertAll();
			// } catch (CucumberException c) {
			// log.warn("no values being fetched from the Query.Please check the
			// query");
		} catch (Exception E) {

			log.warn("Exceptions in finding or verifying data.");
			// } finally {
			//
			// }
		}
	}

	// *******************************************Response Extraction
	// &validation**********************************************
	/**
	 * Extracting Parameters from Response
	 * 
	 * @param responseParameter
	 * @throws Throwable
	 */
	@And("^We fetch below parameters from Json Response Body$")
	public void weFetchBelowParametersFromBody(Map<String, String> responseParameter) throws Throwable {
		JsonPath jsonResponse = new JsonPath(response.asString());
		// Class<baseUtil> refBaseClass = baseUtil.class;
		for (Map.Entry<String, String> field : responseParameter.entrySet()) {
			base.responseParameters.put(field.getValue(), jsonResponse.get(field.getKey()).toString());
			System.out.println(base.responseParameters);
		}
		log.debug("Fetching Parameters From the  Body is Succesfull");

	}

	/**
	 * verifying the count of Issue
	 * 
	 * @param issue
	 * @throws Throwable
	 */

	@And("^weverifythenumberof \"([^\"]*)\"$")
	public void weverifythenumberofissueandispublishedflag(String issue) throws Throwable {
		boolean flag = false;
		JsonPath Js = new JsonPath(response.asString());
		int count = (int) Js.get(issue + ".size()");
		System.out.println(count);

		if (count >= 40) {
			flag = true;
			assertEquals(flag, true);
			log.info("successfully verified the no of Issues");
		}

	}

	@Then("^We fetch the magcodelist from  the Json Response Body and match with expected magcodelist\\.$")
	public void we_fetch_the_magcodelist_from_the_Json_Response_Body_and_match_with_expected_magcodelist()
			throws Throwable {
		boolean flag = false;
		String[] magcodelist = base.requestParameters.get("magCodeList").split(",");
		JsonPath Js = new JsonPath(response.asString());
		List<String> maglist = Js.getList("magCodeList");
		Object responsemagcodelist[] = maglist.toArray();
		for (int i = 0; i <= responsemagcodelist.length - 1; i++) {
			for (int j = 0; j <= magcodelist.length - 1; j++) {
				if (responsemagcodelist[i].toString().equals(magcodelist[j])) {
					log.debug(responsemagcodelist[i].toString() + "is present in the expected magcode list");
					flag = true;
					break;
				}
			}
			softassert.assertTrue(flag);
			softassert.assertAll();
		}
	}

	/**
	 * Deleting the customer after test case.
	 * 
	 * @throws Throwable
	 */

	@After("@CustomerCreation")
	public void deleteCustomer() throws Throwable {
		int code = response.statusCode();
		if (code == 201) {
			weDeclareANewRequest();
			request.given().pathParam("userid", base.requestParameters.get("email"))
					.pathParam("magcode", base.requestParameters.get("magcode"))
					.header("Content-Type", "application/json")
					.headers("sharedsecret", base.requestParameters.get("sharedsecret")).when()
					.delete(base.urlProperties.getProperty("DeleteCustomerWebservice")).then().assertThat()
					.statusCode(200);
		}
	}

	/**
	 * Deleting the profile using authtoken after test case.
	 * 
	 * @throws Throwable
	 */

	@After("@profileDeletion")
	public void deleteProfile() throws Throwable {
		weDeclareANewRequest();
		request.given().queryParam("sharedsecret", base.requestParameters.get("sharedsecret"))
				.queryParam("origin", base.requestParameters.get("origin"))
				.queryParam("appId", base.requestParameters.get("appId"))
				.queryParam("authToken", base.responseParameters.get("authToken"))
				.queryParam("appTypeUid", base.requestParameters.get("appTypeUid"))
				.queryParam("scope", base.requestParameters.get("scope"))
				.queryParam("key", base.requestParameters.get("key")).when()
				.delete(base.urlProperties.getProperty("ProfileWebservice")).then().log().all().and().assertThat()
				.statusCode(200);
		weDeclareANewRequest();
		deleteCustomer();

	}

	/**
	 * Deleting the profile using ExternalId after test case.
	 * 
	 * @throws Throwable
	 */

	@After("@profileDeletionExternalid")
	public void deleteProfile_externalID() throws Throwable {

		request.given().queryParam("sharedsecret", base.requestParameters.get("sharedsecret"))
				.queryParam("origin", base.requestParameters.get("origin"))
				.queryParam("appId", base.requestParameters.get("appId"))
				.queryParam("externalId", base.requestParameters.get("externalId"))
				.queryParam("appTypeUid", base.requestParameters.get("appTypeUid"))
				.queryParam("scope", base.requestParameters.get("scope"))
				.queryParam("key", base.requestParameters.get("key")).when()
				.delete(base.urlProperties.getProperty("ProfileWebservice")).then().assertThat().statusCode(200);
		weDeclareANewRequest();
		deleteCustomer();

	}

	// *******************************Logging Request and
	// Response**************************************************
	/**
	 * Log the Request details
	 * 
	 * @throws Throwable
	 */
	@And("^We log the Request$")
	public void weLogTheRequest() throws Throwable {
		StringWriter requestWriter = new StringWriter();
		PrintStream requestCapture = new PrintStream(new WriterOutputStream(requestWriter), true);
		request.filter(new RequestLoggingFilter(requestCapture));

		request.log().all();
		log.info("Request Info:");
		log.debug(requestWriter.toString());

	}

	/**
	 * Log the Response details
	 * 
	 * @throws Throwable
	 */
	@And("^We log the Response$")
	public void weLogTheResponse() throws Throwable {
		response.then().log().all();
		log.debug("Response Info:");
		log.debug(response.asString());
	}

	// *******************************************Response Extraction &
	// validation**********************************************

	/**
	 * Extracting Parameters from Response
	 * 
	 * @param responseParameter
	 * @throws Throwable
	 * 
	 * 
	 * @param responseFields
	 * @throws Throwable
	 */
	@And("Response body should contain$")
	public void Response_body_should_contain(Map<String, String> responseFields) throws Throwable {
		responseFields = setAutoGeneratedParameters(responseFields);
		for (Map.Entry<String, String> field : responseFields.entrySet()) {
			if (field.getKey().equals("$")) {
				String x = field.getKey();
				json.body(field.getKey(), hasKey(field.getValue()));
			} else if (StringUtils.isNumeric(field.getValue())) {
				JsonPath Js = new JsonPath(response.asString());
				Object x1 = Js.get(field.getKey());
				if (x1 instanceof Integer) {
					json.body(field.getKey(), equalTo(Integer.parseInt(field.getValue())));

				} else {
					json.body(field.getKey(), equalToIgnoringCase(field.getValue()));
				}
			} else if (field.getValue().equalsIgnoreCase("true") || field.getValue().equalsIgnoreCase("false")) {
				JsonPath Js = new JsonPath(response.asString());
				Object x1 = Js.get(field.getKey());
				if (x1 instanceof Boolean) {
					json.body(field.getKey(), equalTo(Boolean.parseBoolean(field.getValue())));
				} else {
					json.body(field.getKey(), equalToIgnoringCase(field.getValue()));
				}

			} else if (field.getValue().startsWith("haskey->")) {
				json.body(field.getKey(), hasKey(field.getValue().replace("haskey->", "").trim()));
			} else {
				json.body(field.getKey(), equalToIgnoringCase(field.getValue()));
			}
		}
		log.debug("Validating Response body is successful");
	}

	/**
	 * Validating Response
	 * 
	 * @param responseFields
	 * @throws Throwable
	 */
	@And("Response body Array should contain$")
	public void Response_body_Array_should_contain(Map<String, String> responseFields) throws Throwable {
		// Map<String, String> params = new HashMap<String, String>();
		responseFields = setAutoGeneratedParameters(responseFields);

		for (Map.Entry<String, String> field : responseFields.entrySet()) {
			if (StringUtils.isNumeric(field.getValue())) {
				json.body(field.getKey(), containsInAnyOrder(Integer.parseInt(field.getValue())));
			} else if (field.getValue().startsWith("haskey->")) {
				json.body(field.getKey(), hasKey(field.getValue().replace("haskey->", "")));
			} else {
				json.body(field.getKey(), containsInAnyOrder(field.getValue()));
			}
		}
		log.debug("Validating Response body is successful");

	}

	/**
	 * Validating Response Code
	 * 
	 * @param statusCode
	 * @throws Throwable
	 */
	@Then("The response status code should be (\\d+)")
	public void The_response_status_code_is(int statusCode) throws Throwable {
		json = response.then().statusCode(statusCode);
		log.debug("Successfully verified the status code");
	}

	/**
	 * Validating Response Code
	 * 
	 * @param statusCode
	 * @throws Throwable
	 */
	@Then("^The response status code should be \"([^\"]*)\"$")
	public void the_response_status_code_should_be(String statuscode) throws Throwable {
		json = response.then().statusCode(Integer.parseInt(statuscode));
		base.responseParameters.put("statuscode", statuscode);
	}

	/**
	 * validating userid
	 * 
	 * @param userid
	 * @throws Throwable
	 */

	@Then("^We verify the  \"([^\"]*)\" in Json Response$")
	public void we_verify_the_in_Json_Response(String userid) throws Throwable {
		json.body(userid, equalToIgnoringCase(base.requestParameters.get("user_id").toString()));
	}

	/**
	 * Appending password with space
	 * 
	 * @param userid
	 * @throws Throwable
	 */

	@Given("^We append the \"([^\"]*)\" with space$")
	public void we_append_the_with_space(String password) throws Throwable {
		String passwordwithSpace = base.requestParameters.get(password) + "   ";
		request.given().formParam(password, passwordwithSpace);
		base.requestParameters.put(password, passwordwithSpace);

	}

	/**
	 * creating Json object
	 * 
	 * @param requestParams
	 * @throws Throwable
	 */

	@Then("^createJSonObject$")
	public void createjsonobject(Map<String, String> requestParams) throws Throwable {
		requestParams = setAutoGeneratedParameters(requestParams);
		base.requestParameters.putAll(requestParams);
		Mainpojo pojo = new Mainpojo();
		pojo.setOrigin(requestParams.get("origin"));
		pojo.setSharedSecret(requestParams.get("sharedsecret"));
		pojo.createUser(requestParams.get("appId"), requestParams.get("appTypeUid"), requestParams.get("authToken"));
		pojo.createProfile(requestParams.get("scope"), requestParams.get("format"), requestParams.get("key"),
				requestParams.get("value"));
		request.body(jsonStringfromJavaclass(pojo));

	}

	/**
	 * creating Json object from global
	 * 
	 * @param requestParams
	 * @throws Throwable
	 */

	@Then("^createJSonObject from global$")
	public void createjsonobject_from_global(Map<String, String> requestParams) throws Throwable {
		requestParams = setAutoGeneratedParameters(requestParams);
		base.requestParameters.putAll(requestParams);
		Mainpojo pojo = new Mainpojo();
		pojo.setOrigin(requestParams.get("origin"));
		pojo.setSharedSecret(requestParams.get("sharedsecret"));
		pojo.createUser_ExternalId(requestParams.get("appId"), requestParams.get("appTypeUid"),
				requestParams.get("externalId"));
		pojo.createProfile(requestParams.get("scope"), requestParams.get("format"), requestParams.get("key"),
				requestParams.get("value"));
		request.body(jsonStringfromJavaclass(pojo));

	}

	// *******************************************Reusable RestAssured
	// Methods****************************************

	/**
	 * Create & Replace Dynamic parameter value
	 */
	public Map<String, String> setAutoGeneratedParameters(Map<String, String> requestParams)
			throws NoSuchFieldException, IllegalAccessException {

		Map<String, String> params = new HashMap<String, String>();
		params.putAll(requestParams);
		if (requestParams.containsValue("<FetchStoredValue>") || requestParams.containsValue("<RandomNumber>")
				|| requestParams.containsValue("<RandomEmail>")
				|| requestParams.containsValue("<AutogenerateBasedOnOrigin>")
				|| requestParams.containsValue("<FetchFromRequestParameters>")
				|| requestParams.containsValue("<FetchFromResponseParameters>")
				|| requestParams.containsValue("<YYYYMMDD>") || requestParams.containsValue("<MM.DD.YYYY>")
				|| requestParams.containsValue("<month dd,YYYY>"))

			for (Map.Entry<String, String> field : params.entrySet()) {
				if (field.getValue().toString().equals("<RandomNumber>")) {
					String randomNumber = refgenericUtils.fetchTimeStamp();
					params.put(field.getKey(), randomNumber);
				} else if (field.getValue().toString().equals("<RandomEmail>")) {
					String randomNumber = refgenericUtils.fetchTimeStamp();
					params.put(field.getKey(), "AutomationTest_" + randomNumber + "@mailinator.com");
				} else if (field.getValue().toString().equals("<AutogenerateBasedOnOrigin>")) {
					// Fetching Shared Secret based on origin
					boolean x = params.containsKey("origin");
					if (x == false) {
						String requestParamater = field.getKey();
						String sharedSecret = base.sharedSecretProperties.get(requestParamater).toString();
						params.put(field.getKey(), sharedSecret);
					} else {
						String sharedSecret = base.sharedSecretProperties.get(params.get("origin")).toString();
						params.put(field.getKey(), sharedSecret);
					}
				} else if (field.getValue().toString().equals("<FetchFromRequestParameters>")) {
					String requestParamater = field.getKey();
					String extractRequestParameter;
					if (base.parameterMappingProperties.containsKey(requestParamater)) { // Performing
						// a Parameter  Mapping and fetching // Value // from // Request
						// Parameter 									
						extractRequestParameter = base.parameterMappingProperties.get(requestParamater).toString();
						String requestFinalValue = base.requestParameters.get(extractRequestParameter).toString();
						params.put(field.getKey(), requestFinalValue);
					} else {
						String requestFinalValue = base.requestParameters.get(requestParamater).toString(); // fetching Value from  Request Parameter
																											
						params.put(field.getKey(), requestFinalValue);
					}

				} else if (field.getValue().toString().equals("<FetchFromResponseParameters>")) {
					String requestParamater = field.getKey();
					String extractRequestParameter;
					if (base.parameterMappingProperties.containsKey(requestParamater)) { // Performing
																							// a
																							// Parameter
																							// Mapping
																							// and
																							// fetching
																							// Value
																							// from
																							// Request
																							// Parameter
						extractRequestParameter = base.parameterMappingProperties.get(requestParamater).toString();
						String requestFinalValue = base.responseParameters.get(extractRequestParameter).toString();
						params.put(field.getKey(), requestFinalValue);
					} else {
						String requestFinalValue = base.responseParameters.get(requestParamater).toString(); // fetching
																												// Value
																												// from
																												// Request
																												// Parameter
						params.put(field.getKey(), requestFinalValue);
					}

				} else if (field.getValue().toString().equals("<YYYYMMDD>")) {

					DateTimeFormatter dtf = DateTimeFormatter.ofPattern("yyyyMMdd");
					LocalDate localDate = LocalDate.now();
					System.out.println(dtf.format(localDate));
					params.put(field.getKey(), dtf.format(localDate));

				} else if (field.getValue().toString().equals("<MM.DD.YYYY>")) {
					DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MM.dd.yyyy");
					LocalDate localDate = LocalDate.now();
					System.out.println(dtf.format(localDate));
					params.put(field.getKey(), dtf.format(localDate));

				} else if (field.getValue().toString().equals("<month dd,YYYY>")) {
					DateTimeFormatter dtf = DateTimeFormatter.ofPattern("MMMM dd,yyyy");
					LocalDate localDate = LocalDate.now();
					System.out.println(dtf.format(localDate));
					params.put(field.getKey(), dtf.format(localDate));
				}

			}
		return params;
	}

	/**
	 * fetching the json file from the path.
	 * 
	 * @param filename
	 */
	@And("^we have JsonBody request \"([^\"]*)\"$")
	public void we_have_JsonBody_request(String filename) {

		String Jsonrequest = base.JsonRequestBody.getProperty(filename);
		String JSONBODY_FILEPATH = constants.RESOURCES_FOLDER_PATH + Jsonrequest;
		JSONParser parser = new JSONParser();
		try {
			JSONObject obj = (JSONObject) parser.parse(new FileReader(JSONBODY_FILEPATH));
			System.out.println(obj.toJSONString());
			request.given().body(obj.toJSONString());

		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * creating json object from Java class
	 * 
	 * @param src
	 * @return
	 */

	public String jsonStringfromJavaclass(Object src) {
		Gson gson = new Gson();
		String jsonstring = gson.toJson(src);
		return jsonstring;

	}

	/**
	 * Establishing a DB connection
	 * 
	 * @param Query
	 */
	public ArrayList<Map<String, Object>> establishDBConnectionandfetchResult(String Query) {
		ArrayList<Map<String, Object>> queryResult = new ArrayList<Map<String, Object>>();
		try {
			String driver = "com.mysql.jdbc.Driver";
			String Url = "jdbc:mysql://lucie-qa.cvzb28jbuyfh.us-east-1.rds.amazonaws.com:4308/lucie";

			String user = "lucie_qa_app";
			String password = "lqaapp15";

			Connection con = DriverManager.getConnection(Url, user, password);
			System.out.println("Successfully connected to Lucie dB");

			Statement statement = con.createStatement();
			ResultSet rset = statement.executeQuery(Query);
			java.sql.ResultSetMetaData data = rset.getMetaData();
			while (rset.next()) {
				Map<String, Object> row = new HashMap<String, Object>();
				for (int i = 1; i <= data.getColumnCount(); i++) {
					row.put(data.getColumnName(i), rset.getObject(i));
				}
				queryResult.add(row);
			}
			// int noofRows=queryResult.size();
			// System.out.println(noofRows);
			// for (Map<String, Object> result:queryResult){
			// System.out.println(result);
			//
			// }
		} catch (Exception E) {

		}

		return queryResult;
	}

	public String fetchingQuery(String key) {

		String query = base.QueryProperties.get(key).toString();
		return query;

	}

}
